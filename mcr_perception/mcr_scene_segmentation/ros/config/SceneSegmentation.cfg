#! /usr/bin/env python

PACKAGE='mcr_scene_segmentation'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# def add (self, name, paramtype, level, description, default = None, min = None, max = None, edit_method = ""):
gen.add ("voxel_leaf_size", double_t, 0, "The size of a leaf (on x,y,z) used for downsampling.", 0.01, 0, 1.0)
gen.add ("voxel_filter_field_name", str_t, 0, "The field name used for filtering", "z")
gen.add ("voxel_filter_limit_min", double_t, 0, "The minimum allowed field value a point will be considered from", 0.0, -100000.0, 100000.0)
gen.add ("voxel_filter_limit_max", double_t, 0, "The maximum allowed field value a point will be considered from", 1.0, -100000.0, 100000.0)

gen.add ("passthrough_filter_field_name", str_t, 0, "The field name used for filtering", "z")
gen.add ("passthrough_filter_limit_min", double_t, 0, "The minimum allowed field value a point will be considered from", 0.0, -100000.0, 100000.0)
gen.add ("passthrough_filter_limit_max", double_t, 0, "The maximum allowed field value a point will be considered from", 1.0, -100000.0, 100000.0)

gen.add ("normal_radius_search", double_t,  0, "Sphere radius for nearest neighbor search",  0.0, 0.0, 0.5)

gen.add ("sac_max_iterations", int_t, 0, "The maximum number of iterations the algorithm will run for", 50, 0, 100000)
gen.add ("sac_distance_threshold", double_t, 0, "The distance to model threshold", 0.02, 0, 1.0)
gen.add ("sac_optimize_coefficients", bool_t, 0, "Model coefficient refinement", True)
gen.add ("sac_eps_angle", double_t, 0, "The maximum allowed difference between the model normal and the given axis in radians.", 0.17, 0.0, 1.5707)
gen.add ("sac_normal_distance_weight", double_t, 0, "The relative weight (between 0 and 1) to give to the angular distance (0 to pi/2) between point normals and the plane normal.", 0.1, 0, 1.0)

gen.add ("prism_min_height", double_t, 0, "The minimum height above the plane from which to construct the polygonal prism", 0.0, 0.0, 5.0)
gen.add ("prism_max_height", double_t, 0, "The maximum height above the plane from which to construct the polygonal prism", 5.0, 0.0, 5.0)

gen.add ("outlier_radius_search", double_t, 0, "Radius of the sphere that will determine which points are neighbors.", 0.1, 0.0, 10.0)
gen.add ("outlier_min_neighbors", int_t, 0, "The number of neighbors that need to be present in order to be classified as an inlier.", 5, 0, 1000)

gen.add ("cluster_tolerance", double_t, 0, "The spatial tolerance as a measure in the L2 Euclidean space", 0.05, 0.0, 2.0)
gen.add ("cluster_min_size", int_t, 0, "The minimum number of points that a cluster must contain in order to be accepted", 1, 0, 1000)
gen.add ("cluster_max_size", int_t, 0, "The maximum number of points that a cluster must contain in order to be accepted", 2147483647, 0, 2147483647)
gen.add ("cluster_min_height", double_t, 0, "The minimum height of the cluster above the given polygon", 0.011, 0, 5.0)
gen.add ("cluster_max_height", double_t, 0, "The maximum height of the cluster above the given polygon", 0.09, 0, 5.0)
gen.add ("cluster_max_length", double_t, 0, "The maximum length of the cluster", 0.25, 0, 5.0)
gen.add ("cluster_min_distance_to_polygon", double_t, 0, "The minimum height of the cluster above the given polygon", 0.03, 0, 5.0)

exit (gen.generate (PACKAGE, "mcr_scene_segmentation", "SceneSegmentation"))

